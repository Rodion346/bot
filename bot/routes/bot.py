from aiogram import Router, F, Bot, types

from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import requests

from config import BASE_URL_API

start_router = Router()

user_state = {}

prices = [
    ("üì∏ 3 —Ñ–æ—Ç–æ", 200),
    ("üì∏ 5 —Ñ–æ—Ç–æ", 300),
    ("üì∏ 10 —Ñ–æ—Ç–æ", 450),
    ("üì∏ 25 —Ñ–æ—Ç–æ", 900),
    ("üì∏ 50 —Ñ–æ—Ç–æ", 1400),
]

def create_service_keyboard(services_with_prices):
    keyboard = InlineKeyboardBuilder()
    for service, price in services_with_prices:
        service_button = InlineKeyboardButton(text=service, callback_data=f"sum_{price}_{service}")
        price_button = InlineKeyboardButton(text=f"{price} ‚ÇΩ", callback_data=f"sum_{price}_{service}")
        keyboard.row(service_button, price_button)

    return keyboard


def create_keyboard(buttons, columns=2):
    keyboard_buttons = []
    for i in range(0, len(buttons), columns):
        row = [types.KeyboardButton(text=button) for button in buttons[i:i + columns]]
        keyboard_buttons.append(row)
    return types.ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)

@start_router.message(Command('start'))
async def process_start_command(message: types.Message):
    referer_id = str(message.text[7:]) if len(message.text) > 7 else "0"
    payload = {"id": f"{message.from_user.id}", "referer_id": referer_id}
    requests.post(f"{BASE_URL_API}/api/v1/user", json=payload)
    buttons = ["üîû –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ", "üíµ –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏", "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"]
    keyboard = create_keyboard(buttons, columns=1)
    start_txt = ("‚ù£Ô∏è–ü—Ä–∏–≤–µ—Ç, —è - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–¥–µ—Ç—å –ª—é–±—É—é –¥–µ–≤—É—à–∫—É —Å –ø–æ–º–æ—â—å—é –ò–ò. –¢—ã —Å–∞–º —Ä–µ—à–∞–µ—à—å –∫–∞–∫–æ–π –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç - "
                 "–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é. –ù–∞–∂–º–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
    await message.answer(start_txt, reply_markup=keyboard)



@start_router.message(F.text == "üîû –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ")
async def processing_image(message: types.Message):
    kb = InlineKeyboardBuilder()
    Button = InlineKeyboardButton(text='üë®‚Äçüíª –£–º–Ω–∞—è', callback_data="smart")
    Button2 = InlineKeyboardButton(text='‚ö°Ô∏è –ë—ã—Å—Ç—Ä–∞—è', callback_data="simple")
    kb.row(Button)
    kb.row(Button2)
    obr_txt = ("üë®‚Äçüíª –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞ (—Ä–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏, –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ç–¥.), –æ–¥–µ–∂–¥—É –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ "
               "–ø–æ–∑—ã.\n‚ö°Ô∏è –ë—ã—Å—Ç—Ä–∞—è(–±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —ç—Ç–æ —Ç–∞–∫) –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ä–∞–∑–¥–µ–≤–∞–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –° –æ—Ç–ª–∏—á–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é.")
    await message.answer(obr_txt, reply_markup=kb.as_markup())

@start_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_info(message: types.Message):
    response = requests.get(f"{BASE_URL_API}/api/v1/user/{message.from_user.id}").json()
    id_user = response.get("id")
    processing_balance = response.get("processing_balance")
    referal_balance = response.get("referal_balance")
    await message.answer(f"ID: {id_user}\n–û–±—Ä–∞–±–æ—Ç–∫–∏: {processing_balance}\n–ë–∞–ª–∞–Ω—Å: {referal_balance}")


@start_router.message(F.text == "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def referals_program(message: types.Message):
    buttons = ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", "üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"]
    keyboard = create_keyboard(buttons, columns=1)
    response = requests.get(f"{BASE_URL_API}/api/v1/user/{message.from_user.id}").json()
    referal_balance = response.get("referal_balance")
    await message.answer(f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {referal_balance}\n–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É\nüîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", reply_markup=keyboard)

@start_router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_menu(message: types.Message):
    buttons = ["üîû –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ", "üíµ –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏", "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"]
    keyboard = create_keyboard(buttons, columns=1)
    await message.answer(' ', reply_markup=keyboard)

@start_router.message(F.text == "üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
async def get_invite_link(message: types.Message):
    await message.answer("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –µ–π —Å –¥—Ä—É–∑—å—è–º–∏, –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö (Tiktok, Reels, Shorts) –∏–ª–∏ —Ñ–æ—Ä—É–º–∞—Ö. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 30% –æ—Ç —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç. –í—Å—é —ç—Ç—É —Å—É–º–º—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç–æ–π –≤ USDT Trc20 –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ 10USDT).")
    await message.answer(f"https://t.me/SmartNudifyAI_bot?start={message.from_user.id}")


@start_router.message(F.text == "üíµ –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
async def top_balance(message: types.Message):
    kb = create_service_keyboard(prices)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫:", reply_markup=kb.as_markup())
    await message.edit_reply_markup(reply_markup=None)

@start_router.callback_query(F.data == "pay_photo")
async def top_balance(call: CallbackQuery):
    kb = create_service_keyboard(prices)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫:", reply_markup=kb.as_markup())
    await call.message.edit_reply_markup(reply_markup=None)